user <%= node[:nginx][:user] %>;
worker_processes  <%= node[:nginx][:worker_processes] %>;
<% if node[:nginx][:daemon_disable] -%>
daemon off;
<% end -%>

error_log  <%= node[:nginx][:log_dir] %>/error.log;
pid        /var/run/nginx.pid;

events {
  worker_connections  <%= node[:nginx][:worker_connections] %>;
}

http {
  passenger_root /usr/lib/ruby/gems/1.8/gems/passenger-3.0.2;
  passenger_ruby /usr/bin/ruby1.8;
  passenger_default_user root;
  passenger_max_pool_size 30;
  passenger_pool_idle_time 0;

  # Specify a log format compatible with Apache's combined format
  log_format main '$remote_addr - $remote_user [$time_local] '
    '"$request" $status $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"' ;

  include       <%= node[:nginx][:dir] %>/mime.types;
  default_type  application/octet-stream;

  access_log    <%= node[:nginx][:log_dir] %>/access.log main;

  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;

  <% if node[:nginx][:keepalive] == "on" %>
  keepalive_timeout  <%= node[:nginx][:keepalive_timeout] %>;
  <% end %>

  gzip  <%= node[:nginx][:gzip] %>;
  <% if node[:nginx][:gzip] == "on" %>
  gzip_http_version <%= node[:nginx][:gzip_http_version] %>;
  gzip_comp_level <%= node[:nginx][:gzip_comp_level] %>;
  gzip_proxied <%= node[:nginx][:gzip_proxied] %>;
  gzip_types <%= node[:nginx][:gzip_types].join(' ') %>;
  <% end %>

  server_names_hash_bucket_size <%= node[:nginx][:server_names_hash_bucket_size] %>;

  include <%= node[:nginx][:dir] %>/conf.d/*.conf;
  include <%= node[:nginx][:dir] %>/sites-enabled/*;

  # Default host is blank on purpose
  server {
    listen 80;
    server_name example.com;
  }

  server {
    listen 80;
    server_name <%= node[:panda][:apihost] %> <%= node[:panda][:apihost_alias] %> <%= node[:ipaddress] %> ;
    access_log  /var/log/nginx_<%= node[:panda][:apihost] %>_<%= node[:panda][:stage] %>.log;
    root <%= node[:panda][:root] %>/public;
    rack_env <%= node[:panda][:stage] %>;
    passenger_enabled on;
    #passenger_set_cgi_param HTTP_REQUEST_START $start_time;

    location /v2/videos.json {
      set $nginx_upload_module_enabled off;

      ## Multipart upload / flash uploader
      if ($content_type ~* "multipart*") {
        set $nginx_upload_module_enabled on;
      }

      ## Octet stream upload / html5 uploader
      if ($content_type ~* "octet-stream") {
        set $nginx_upload_module_enabled on;
      }

      ## Url encoded request
      if ($content_type ~* "urlencoded") {
        set $nginx_upload_module_enabled off;
      }

      if ($request_method != POST) {
        set $nginx_upload_module_enabled off;
      }
## Turn on passenger if request is not a file upload and break

      if ($nginx_upload_module_enabled = off) {
        passenger_enabled on;
        #passenger_set_cgi_param HTTP_REQUEST_START $start_time;
        break;
      }

      ## Turn on nginx file upload

      #proxy_set_header HTTP_REQUEST_START $start_time;

      #upload_pass /v2/uploaded_videos.json;
      #upload_pass_args on;

      #upload_set_form_field file.name "$upload_file_name";
      #upload_set_form_field file.content_type "$upload_content_type";
      #upload_set_form_field file.path "$upload_tmp_path";

      #upload_store /mnt/tmp/nginx_uploads;

      #upload_pass_form_field ".+";

      #upload_cleanup 400 401 403 404 412 413 415 499 500-505;

      #raw_uploads on;
    }
  }
}
